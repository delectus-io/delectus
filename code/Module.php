<?php

use Delectus\BackEnd\ApiRequestTask;

/**
 * Shared functionality for delectus service modules such as delectus-search and delectus-index.
 *
 * This will be required by composer.json and installed automatically when you install a module which needs it.
 */
abstract class DelectusModule extends \Object {
	// name of tab in cms to show delectus related fields/controls on
	private static $cms_tab_name = 'Root.Delectus';

	// list of openssl supported algorythm names we are supporting
	private static $encryption_algorythms = [];

	// length of tokens generated by generate_token() and stored in the database
	const TokenLength = 64;

	public static function cms_tab_name() {
		return static::config()->get( 'cms_tab_name' );
	}

	public static function encryption_options() {
		return static::config()->get('encryption_algorythms') ?: [];
	}

	/**
	 * Generate a random string 64 characters long, not usefull for encrypting/decrypting things but as tokens etc.
	 *
	 * @param string $salt
	 *
	 * @return string
	 * @throws \Exception
	 */
	public static function generate_token( $salt = '' ) {
		$token = openssl_random_pseudo_bytes( static::TokenLength, $strong );
		if ( $salt && ! $strong ) {
			throw new Exception( "salt provided but not strong " . static::config()->get( 'encryption_algorythm' ) );
		}

		return $token;
	}

	/**
	 * Return client token from SiteConfig or this module config.
	 *
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public static function tokens_in_url() {
		static $tokensInURL;
		if ( is_null( $tokensInURL ) ) {
			$tokensInURL = SiteConfig::current_site_config()->get( DelectusIndexSiteConfigExtension::TokensInURLFieldName )
				?: self::config()->get( 'tokens_in_rul' );

		}

		return $tokensInURL;
	}

	/**
	 * Return client token from SiteConfig or this module config.
	 *
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public static function client_token() {
		static $clientToken;
		if ( is_null( $clientToken ) ) {
			$clientToken = SiteConfig::current_site_config()->get( DelectusIndexSiteConfigExtension::ClientTokenFieldName )
				?: self::config()->get( 'client_token' );

		}

		return $clientToken;
	}

	/**
	 * Return client salt from SiteConfig or this module config.
	 *
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public static function client_salt() {
		static $salt;
		if ( is_null( $salt ) ) {
			$salt = SiteConfig::current_site_config()->get( DelectusIndexSiteConfigExtension::ClientTokenFieldName )
				?: self::config()->get( 'client_salt' );
		}

		return $salt;
	}

	/**
	 * Return client salt from SiteConfig or this module config.
	 *
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public static function client_secret() {
		static $secret;
		if ( is_null( $secret ) ) {
			$secret = SiteConfig::current_site_config()->get( DelectusIndexSiteConfigExtension::ClientSecretFieldName )
				?: self::config()->get( 'client_secret' );
		}

		return $secret;
	}

	/**
	 * Return site identifier from SiteConfig or this module config.
	 *
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public static function site_identifier() {
		static $siteID;

		if ( is_null( $siteID ) ) {
			$siteID = SiteConfig::current_site_config()->get( DelectusIndexSiteConfigExtension::SiteIdentifierFieldName )
				?: self::config()->get( 'site_identifier' );
		}

		return $siteID;
	}

	/**
	 * Return version number from config.
	 *
	 * @return string
	 */
	public static function version() {
		return self::config()->get( 'version' );
	}

	protected static function module_name() {
		return static::config()->get( 'module_name' );
	}

}